---
# Network Policy for PostgreSQL Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: sip-system
spec:
  podSelector:
    matchLabels:
      app: postgres
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow connections from SIP server pods
  - from:
    - podSelector:
        matchLabels:
          app: sip-server
    ports:
    - protocol: TCP
      port: 5432
  egress:
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # Allow responses to SIP server
  - to:
    - podSelector:
        matchLabels:
          app: sip-server
    ports:
    - protocol: TCP

---
# Network Policy for SIP Server
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sip-server-network-policy
  namespace: sip-system
spec:
  podSelector:
    matchLabels:
      app: sip-server
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow SIP traffic from any source (VOIP providers)
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
        except:
        - 169.254.169.254/32  # Block AWS metadata service
        - 10.0.0.0/8          # Optional: Block private networks
        - 172.16.0.0/12
        - 192.168.0.0/16
    ports:
    # SIP UDP
    - protocol: UDP
      port: 5060
    # SIP TCP
    - protocol: TCP
      port: 5060
    # SIP TLS
    - protocol: TCP
      port: 5061
    # RTP Media ports
    - protocol: UDP
      port: 10000
      endPort: 20000
  
  # Allow API access from within cluster
  - from:
    - namespaceSelector: {}  # Any namespace in cluster
    - podSelector: {}        # Any pod
    ports:
    - protocol: TCP
      port: 8000  # API port
    - protocol: TCP
      port: 8080  # WebSocket port
  
  # Allow health checks from kubelet
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0  # Kubelet runs on host network
    ports:
    - protocol: TCP
      port: 8000  # Health check endpoint
  
  egress:
  # Allow DNS resolution
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  
  # Allow connections to PostgreSQL
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  
  # Allow connections to AI platform
  - to:
    - podSelector:
        matchLabels:
          app: ai-platform
    ports:
    - protocol: TCP
      port: 8001
  # Also allow external AI platform (if not in cluster)
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 8001
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 80   # HTTP
  
  # Allow outbound SIP to VOIP trunks
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: UDP
      port: 5060
    - protocol: TCP
      port: 5060
    - protocol: TCP
      port: 5061
    # RTP media
    - protocol: UDP
      port: 10000
      endPort: 60000  # Wide range for various providers

---
# Network Policy for AI Platform (if deployed in same cluster)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ai-platform-network-policy
  namespace: sip-system
spec:
  podSelector:
    matchLabels:
      app: ai-platform
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow WebSocket connections from SIP server
  - from:
    - podSelector:
        matchLabels:
          app: sip-server
    ports:
    - protocol: TCP
      port: 8001
  # Allow health checks
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 8000
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # Allow external API calls (for AI services)
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Default deny all traffic for namespace (optional - for strict security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: sip-system
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow ingress controller access (if using nginx-ingress for API)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-controller
  namespace: sip-system
spec:
  podSelector:
    matchLabels:
      app: sip-server
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000  # API port

---
# Network Policy for monitoring/logging pods (if using Prometheus/Grafana)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring
  namespace: sip-system
spec:
  podSelector: {}  # Apply to all pods in namespace
  policyTypes:
  - Ingress
  ingress:
  # Allow Prometheus scraping
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090  # Metrics port
    - protocol: TCP
      port: 8000  # API metrics endpoint

---
# Network Policy for specific VOIP provider IPs (example)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: voip-provider-whitelist
  namespace: sip-system
spec:
  podSelector:
    matchLabels:
      app: sip-server
  policyTypes:
  - Ingress
  ingress:
  # Twilio SIP IPs (example - replace with actual provider IPs)
  - from:
    - ipBlock:
        cidr: 54.172.60.0/23
    - ipBlock:
        cidr: 34.203.250.0/23
    - ipBlock:
        cidr: 52.215.127.0/24
    - ipBlock:
        cidr: 3.122.181.0/24
    ports:
    - protocol: UDP
      port: 5060
    - protocol: TCP
      port: 5060
    - protocol: UDP
      port: 10000
      endPort: 20000
  
  # Vonage SIP IPs (example)
  - from:
    - ipBlock:
        cidr: 174.37.245.0/24
    - ipBlock:
        cidr: 174.36.196.0/24
    ports:
    - protocol: UDP
      port: 5060
    - protocol: TCP
      port: 5060
    - protocol: UDP
      port: 10000
      endPort: 20000

---
# Network Policy for development/debugging (can be deleted in production)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-debug-access
  namespace: sip-system
  labels:
    environment: development
spec:
  podSelector:
    matchLabels:
      app: sip-server
  policyTypes:
  - Ingress
  ingress:
  # Allow kubectl port-forward and exec
  - from:
    - ipBlock:
        cidr: 127.0.0.1/32  # localhost
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 5060